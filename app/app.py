import streamlit as st

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
# st.set_page_config() debe ser el primer comando de Streamlit en tu script.
st.set_page_config(
    page_title="API Compass",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- MODELO DE DATOS Y L√ìGICA (Aqu√≠ ir√≠an los imports de tus m√≥dulos) ---
# from plan import Plan
# from charge_model import generate_charge_curves
# Por ahora, usamos funciones placeholder.

# --- FUNCIONES PARA CADA P√ÅGINA/SECCI√ìN ---
# Encapsular el contenido de cada secci√≥n en una funci√≥n hace el c√≥digo m√°s limpio.

def show_home_page():
    """Muestra la p√°gina de bienvenida e introducci√≥n."""
    st.title("üè° Bienvenida al Modelador de Consumo de APIs")
    st.markdown("""
    Esta herramienta te ayuda a visualizar y entender los l√≠mites de consumo de una API
    utilizando una analog√≠a de **carga y descarga**, similar a una bater√≠a.
    
    **Navega por las diferentes secciones usando el men√∫ de la izquierda.**
    
    ### ¬øQu√© puedes hacer aqu√≠?
    - **Simulador Interactivo:** Introduce los l√≠mites de una API y tu tasa de consumo para generar un `Quota Burn-down Chart` y analizar su sostenibilidad.
    - **Casos de Estudio:** Explora ejemplos pre-configurados que ilustran escenarios comunes (consumo ideal, 'bursts' insostenibles, etc.).
    - **Sobre el Modelo:** Aprende m√°s sobre la teor√≠a detr√°s de este an√°lisis.
    """)

def show_interactive_simulator():
    """Muestra el simulador donde el usuario introduce los datos."""
    st.title("üõ†Ô∏è Simulador Interactivo")
    st.markdown("Introduce los par√°metros de la API y tu tasa de consumo esperada para generar el an√°lisis.")
    
    # --- Columna de Entradas (Inputs) ---
    with st.container(border=True):
        st.subheader("Par√°metros de la API")
        col1, col2, col3 = st.columns(3)
        with col1:
            quota = st.number_input("Cuota Total (requests)", min_value=1, value=5000)
        with col2:
            window = st.number_input("Ventana de Tiempo (minutos)", min_value=1, value=60)
        with col3:
            rate = st.number_input("Tasa de Consumo (requests/minuto)", min_value=1, value=100)
    
    # --- Columna de Salidas (Outputs) ---
    if st.button("Generar An√°lisis", type="primary"):
        st.subheader("Resultados del An√°lisis")
        st.info("Aqu√≠ es donde llamar√≠as a tu l√≥gica de `charge_model.py` y mostrar√≠as el gr√°fico de Plotly.")
        
        # Placeholder para la gr√°fica
        st.markdown("> *Gr√°fica de `Quota Burn-down` aparecer√° aqu√≠...*")
        
        # Placeholder para el diagn√≥stico
        st.success("Diagn√≥stico: **Consumo Sostenible**. Tienes suficiente margen (`headroom`).")

def show_case_studies():
    """Muestra los ejemplos y casos de estudio guiados."""
    st.title("üìö Casos de Estudio")
    st.markdown("Aqu√≠ analizar√°s y explicar√°s diferentes escenarios con configuraciones fijas.")

    with st.expander("Caso A: Consumo Ideal y Sostenible", expanded=True):
        st.markdown("""
        **Escenario:** Una API con una cuota generosa y un cliente que consume a una tasa constante y moderada.
        
        **An√°lisis:** El punto de equilibrio (`equilibrium point`) se encuentra muy por encima del umbral de seguridad, indicando un uso saludable y con margen para picos de demanda.
        
        *Aqu√≠ ir√≠a la gr√°fica de Plotly para este caso.*
        """)

    with st.expander("Caso B: Consumo Insostenible por R√°fagas ('Bursts')"):
        st.markdown("""
        **Escenario:** Un script que, al iniciarse, intenta sincronizar muchos datos, consumiendo la cuota de forma muy agresiva al principio.
        
        **An√°lisis:** El `headroom` se agota r√°pidamente. Este patr√≥n de consumo llevar√° inevitablemente a errores `429 Too Many Requests` si no se implementa una estrategia de `backoff`.
        
        *Aqu√≠ ir√≠a la gr√°fica de Plotly para este caso.*
        """)

def show_about_page():
    """Muestra la explicaci√≥n te√≥rica del modelo."""
    st.title("üìñ Sobre el Modelo")
    st.markdown("""
    ### El Concepto de Carga y Descarga
    El modelo se basa en una analog√≠a simple:
    
    - La **Cuota Total** de la API es la **capacidad m√°xima de una bater√≠a**.
    - La **Curva de Carga (Azul)** representa la **energ√≠a consumida** a lo largo del tiempo.
    - La **Curva de Descarga (Roja)** representa la **energ√≠a restante** o capacidad residual (`headroom`).
    
    ### Sostenibilidad
    Un patr√≥n de consumo se considera **sostenible** si la capacidad residual no se agota antes de que la ventana de tiempo se reinicie. El punto donde ambas curvas se cruzan nos da una indicaci√≥n clave de la "salud" de nuestra estrategia de consumo.
    """)
    st.image("https://i.imgur.com/8StBwTj.png", caption="Analog√≠a visual del modelo de consumo.")


# --- NAVEGACI√ìN PRINCIPAL EN LA BARRA LATERAL ---
# Usamos un st.radio para crear el men√∫ de navegaci√≥n.
st.sidebar.title("Navegaci√≥n")
page_options = {
    "Bienvenida": show_home_page,
    "Simulador Interactivo": show_interactive_simulator,
    "Casos de Estudio": show_case_studies,
    "Sobre el Modelo": show_about_page
}

selected_page = st.sidebar.radio("Elige una secci√≥n:", list(page_options.keys()))

# --- RENDERIZADO DE LA P√ÅGINA SELECCIONADA ---
# Llama a la funci√≥n correspondiente a la opci√≥n elegida en el men√∫.
page_options[selected_page]()

# A√±ade un pie de p√°gina a la barra lateral
st.sidebar.markdown("---")
st.sidebar.info("Desarrollado por [Tu Nombre].")
